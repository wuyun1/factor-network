{"version":3,"file":"factor-network.js","sources":["../src/util.js","../src/network.js","../src/createBackPropagation.js","../src/createEvolution.js","../src/MCM.js","../src/MCTS.js","../src/UCT.js","../src/MCNNS.js","../src/index.js"],"sourcesContent":["export function randomClamped() {\n\treturn Math.random() * 2 - 1\n}\n\nexport function randomBoolean() {\n\treturn Math.random() <= 0.5\n}\n\nexport function identity(x) {\n\treturn x\n}\n\n\n\nfunction RELU(x) {\n\treturn Math.max(0, x)\n}\n\nfunction RELU_DERIVATIVE(x) {\n\treturn x <= 0 ? 0 : 1\n}\n\nfunction SIGMOID(x) {\n\treturn 1 / (1 + Math.exp(-x / 1))\n}\n\nfunction SIGMOID_DERIVATIVE(x) {\n\treturn x * (1 - x)\n}\n\nfunction TANH(x) {\n\tif (x === Infinity) {\n\t\treturn 1;\n\t} else if (x === -Infinity) {\n\t\treturn -1;\n\t} else {\n\t\tlet e2x = Math.exp(2 * x);\n\t\treturn (e2x - 1) / (e2x + 1);\n\t}\n}\n\nfunction TANH_DERIVATIVE(x) {\n\treturn 1 - x * x\n}\n\nfunction LINEAR(x) {\n\treturn x\n}\n\nfunction LINEAR_DERIVATIVE(x) {\n\treturn 1\n}\n\nconst activation = {\n\tRELU: {\n\t\toutput: RELU,\n\t\tderivative: RELU_DERIVATIVE\n\t},\n\tSIGMOID: {\n\t\toutput: SIGMOID,\n\t\tderivative: SIGMOID_DERIVATIVE\n\t},\n\tTANH: {\n\t\toutput: TANH,\n\t\tderivative: TANH_DERIVATIVE\n\t}\n}\n\nexport {\n\tactivation\n};\n","import {\n\trandomClamped,\n\tactivation\n} from './util'\n\nexport function create(options) {\n\tlet network = []\n\tlet previousInputs = options[0]\n\tfor (let i = 1; i < options.length; i++) {\n\t\tlet currentLayer = []\n\t\tfor (let j = 0; j < options[i]; j++) {\n\t\t\tlet currentNode = []\n\t\t\tfor (let k = 0; k < previousInputs; k++) {\n\t\t\t\tlet randomWeight = randomClamped()\n\t\t\t\tcurrentNode.push(randomWeight)\n\t\t\t}\n\t\t\tcurrentLayer.push(currentNode)\n\t\t}\n\t\tpreviousInputs = currentLayer.length\n\t\tnetwork.push(currentLayer)\n\t}\n\treturn network\n}\n\nexport function compute(network, inputs, activationType='SIGMOID') {\n\tlet currentInputs = inputs\n\tlet networkResult = [inputs.concat()]\n\tfor (let i = 0; i < network.length; i++) {\n\t\tlet currentLayer = network[i]\n\t\tlet currentLayerResult = []\n\t\tfor (let j = 0; j < currentLayer.length; j++) {\n\t\t\tlet currentNode = currentLayer[j]\n\t\t\tlet sum = 0\n\t\t\tfor (let k = 0; k < currentNode.length; k++) {\n\t\t\t\tlet currentWeight = currentNode[k]\n\t\t\t\tsum += currentInputs[k] * currentWeight\n\t\t\t}\n\t\t\tlet currentNodeResult = getActivation(activationType, i).output(sum)\n\t\t\tcurrentLayerResult.push(currentNodeResult)\n\t\t}\n\t\tnetworkResult.push(currentLayerResult)\n\t\tcurrentInputs = currentLayerResult\n\t}\n\treturn networkResult\n}\n\nexport function getActivation(type, layerIndex) {\n\tif (typeof type === 'string') {\n\t\treturn activation[type]\n\t} else if (Array.isArray(type)) {\n\t\treturn activation[type[layerIndex]]\n\t}\n}\n\nexport function walk(network, accessor) {\n\tfor (let i = 0; i < network.length; i++) {\n\t\tlet currentLayer = network[i]\n\t\tfor (let j = 0; j < currentLayer.length; j++) {\n\t\t\tlet currentNode = currentLayer[j]\n\t\t\tfor (let k = 0; k < currentNode.length; k++) {\n\t\t\t\tlet currentWeight = currentNode[k]\n\t\t\t\taccessor({\n\t\t\t\t\tweight: currentWeight,\n\t\t\t\t\tnode: currentNode,\n\t\t\t\t\tlayer: currentLayer,\n\t\t\t\t\tnetwork: network,\n\t\t\t\t\tpath: [i, j, k]\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function copy(network) {\n\treturn JSON.parse(JSON.stringify(network))\n}\n\nexport function isEqual(aNetwork, bNetwork) {\n\treturn JSON.stringify(aNetwork) === JSON.stringify(bNetwork)\n}","import * as $network from './network'\nimport { activation, identity } from './util'\n\nconst defaults = {\n\tnetwork: [2, 2, 1],\n\tactivation: 'SIGMOID',\n\tlearningRate: 0.1,\n\toutput: identity,\n}\n\nexport default function createBackPropagation(settings) {\n\tlet options = Object.assign({}, defaults, settings)\n\tlet network = $network.create(options.network)\n\tlet networkResult = null\n\n\tfunction getNetwork() {\n\t\treturn network\n\t}\n\n\tfunction replaceNetwork(newNetwork) {\n\t\tnetwork = newNetwork\n\t}\n\n\tfunction compute(inputs) {\n\t\tnetworkResult = $network.compute(\n\t\t\tnetwork,\n\t\t\tinputs,\n\t\t\toptions.activation\n\t\t)\n\t\treturn networkResult\n\t}\n\n\tfunction output(index, inputs) {\n\t\tlet results = compute(inputs)\n\t\treturn options.output(results[results.length - 1])\n\t}\n\n\tfunction computeError(labels) {\n\t\tlet errors = []\n\t\tlet lastResult = networkResult[networkResult.length - 1]\n\t\tfor (let i = 0; i < labels.length; i++) {\n\t\t\tlet error = lastResult[i] - labels[i]\n\t\t\terrors.push(error)\n\t\t}\n\t\treturn computeNetworkError(network, errors)\n\t}\n\n\tfunction adjust(labels, learningRate=options.learningRate) {\n\t\tlet networkError = computeError(labels)\n\t\tupdateNetworkWeights(\n\t\t\tnetwork,\n\t\t\tnetworkResult,\n\t\t\tnetworkError,\n\t\t\toptions.activation,\n\t\t\tlearningRate\n\t\t)\n\t}\n\n\tfunction train(inputs, labels) {\n\t\tcompute(inputs)\n\t\tadjust(labels)\n\t}\n\n\treturn {\n\t\toptions: options,\n\t\tgetNetwork: getNetwork,\n\t\treplaceNetwork: replaceNetwork,\n\t\tcompute: compute,\n\t\tadjust: adjust,\n\t\ttrain: train,\n\t\toutput: output,\n\t}\n}\n\nfunction computeNetworkError(network, errors) {\n\tlet networkError = [errors.concat()]\n\tlet inputErrors = errors\n\n\tfor (let i = network.length - 2; i >= 0; i--) {\n\t\tlet currentLayer = network[i]\n\t\tlet nextLayer = network[i + 1]\n\t\tlet layerError = []\n\t\tfor (let j = currentLayer.length - 1; j >= 0; j--) {\n\t\t\tlet nodeError = 0\n\t\t\tfor (let k = nextLayer.length - 1; k >= 0; k--) {\n\t\t\t\tlet weight = nextLayer[k][j]\n\t\t\t\tnodeError += inputErrors[k] * weight\n\t\t\t}\n\t\t\tlayerError.unshift(nodeError)\n\t\t}\n\t\tnetworkError.unshift(layerError)\n\t\tinputErrors = layerError\n\t}\n\n\treturn networkError\n}\n\nfunction updateNetworkWeights(network, networkResult, networkError, activationType, learningRate) {\n\t$network.walk(network, function(data) {\n\t\tlet path = data.path\n\t\tlet currentWeight = network[path[0]][path[1]][path[2]]\n\t\tlet currentInput = networkResult[path[0]][path[2]]\n\t\tlet currentResult = networkResult[path[0] + 1][path[1]]\n\t\tlet currentError = networkError[path[0]][path[1]]\n\t\tlet currentActivation = $network.getActivation(activationType, path[0])\n\t\tlet deltaWeight = -learningRate * currentError * currentInput * currentActivation.derivative(currentResult)\n\t\tlet newWeight = currentWeight + deltaWeight\n\t\tnetwork[path[0]][path[1]][path[2]] = newWeight\n\t})\n}","import {\n\tidentity,\n\trandomBoolean,\n\trandomClamped,\n} from './util'\nimport * as $network from './network'\n\nconst defaults = {\n\tnetwork: [2, 2, 1],\n\tamount: 50,\n\telitismRate: 0.2,\n\trandomRate: 0.2,\n\tmixNumber: 1,\n\tmutation: {\n\t\trate: 0.1,\n\t\trange: 0.5,\n\t},\n\tactivation: 'SIGMOID',\n\toutput: identity,\n}\n\nexport default function createEvolution(settings) {\n\tlet options = Object.assign({}, defaults, settings)\n\tlet networks = []\n\n\tfunction createNetworks(amount) {\n\t\tfor (let i = 0; i < amount; i++) {\n\t\t\tlet network = $network.create(options.network)\n\t\t\tnetworks.push(network)\n\t\t}\n\t\toptions.amount = networks.length\n\t}\n\n\tfunction eachNetwork(handleNetwork) {\n\t\tnetworks.forEach(handleNetwork)\n\t}\n\n\tfunction updateAmount(targetAmount) {\n\t\tlet currentAmount = networks.length\n\t\tif (currentAmount > targetAmount) {\n\t\t\tnetworks.length = targetAmount\n\t\t\toptions.amount = targetAmount\n\t\t} else if (currentAmount < targetAmount) {\n\t\t\tcreateNetworks(targetAmount - currentAmount)\n\t\t}\n\t}\n\n\tfunction getNetworks() {\n\t\treturn networks\n\t}\n\n\tfunction replaceNetworks(newNetworks) {\n\t\tnetworks = newNetworks\n\t}\n\n\tfunction sortNetworks(ranks) {\n\t\tlet newNetworks = []\n\t\tfor (let i = 0; i < ranks.length; i++) {\n\t\t\tnewNetworks.push(networks[ranks[i]])\n\t\t}\n\t\tnetworks = newNetworks\n\t\toptions.amount = networks.length\n\t}\n\n\tfunction compute(index, inputs) {\n\t\treturn $network.compute(\n\t\t\tnetworks[index],\n\t\t\tinputs,\n\t\t\toptions.activation\n\t\t)\n\t}\n\n\tfunction output(index, inputs) {\n\t\tlet results = compute(index, inputs)\n\t\treturn options.output(results[results.length - 1])\n\t}\n\n\tfunction adjust(ranks) {\n\t\tif (ranks) {\n\t\t\tsortNetworks(ranks)\n\t\t}\n\n\t\tlet newNetworks = []\n\n\t\tlet elitismAmount = Math.round(options.elitismRate * options.amount)\n\t\tfor (let i = 0; i < elitismAmount; i++) {\n\t\t\tnewNetworks.push(networks[i])\n\t\t}\n\n\t\tlet randomAmount = Math.round(options.randomRate * options.amount)\n\t\tfor (let i = 0; i < randomAmount; i++) {\n\t\t\tnewNetworks.push($network.create(options.network))\n\t\t}\n\n\t\tlet max = 0\n\t\twhile (true) {\n\t\t\tfor (let i = 0; i < max; i++) {\n\t\t\t\tfor (let j = 0; j < options.mixNumber; j++) {\n\t\t\t\t\tlet newNetwork = mixNetwork(\n\t\t\t\t\t\t$network.copy(networks[i]),\n\t\t\t\t\t\tnetworks[max],\n\t\t\t\t\t\toptions.mutation\n\t\t\t\t\t)\n\t\t\t\t\tnewNetworks.push(newNetwork)\n\t\t\t\t\tif (newNetworks.length >= options.amount) {\n\t\t\t\t\t\tnewNetworks.length = options.amount\n\t\t\t\t\t\tnetworks = newNetworks\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax++\n\t\t\tif (max === networks.length) {\n\t\t\t\tmax = 0\n\t\t\t}\n\t\t}\n\t}\n\n\tcreateNetworks(options.amount)\n\n\treturn {\n\t\toptions: options,\n\t\tcreateNetworks: createNetworks,\n\t\teachNetwork: eachNetwork,\n\t\tgetNetworks: getNetworks,\n\t\treplaceNetworks: replaceNetworks,\n\t\tsortNetworks: sortNetworks,\n\t\tupdateAmount: updateAmount,\n\t\tcompute: compute,\n\t\tadjust: adjust,\n\t\toutput: output,\n\t}\n}\n\nfunction mixNetwork(targetNetwork, sourceNetwork, mutation) {\n\t$network.walk(targetNetwork, function(data) {\n\t\tlet path = data.path\n\t\tif (randomBoolean()) {\n\t\t\tlet sourceWeight = sourceNetwork[path[0]][path[1]][path[2]]\n\t\t\ttargetNetwork[path[0]][path[1]][path[2]] = sourceWeight\n\t\t}\n\t\tif (Math.random() <= mutation.rate) {\n\t\t\ttargetNetwork[path[0]][path[1]][path[2]] += mutation.range * randomClamped()\n\t\t}\n\t})\n\treturn targetNetwork\n}","export default class MCM {\n  constructor(board) {\n    this.originalBoard = board\n    this.statistic = []\n  }\n  run(iterations) {\n    let total = Number(iterations)\n    let actions = this.originalBoard.getActions()\n\n    for (let i = 0; i < actions.length; i++) {\n\t\t\tlet count = Math.floor(total / actions.length)\n      while (count--) {\n        this.simulate(actions[i])\n      }\n    }\n\n    return this.getBestAction()\n  }\n  simulate(rootAction) {\n    let board = this.originalBoard.clone()\n    board.doAction(rootAction)\n\n    let actions = board.getActions()\n    while (actions.length) {\n      let action = actions[Math.floor(Math.random() * actions.length)]\n      board.doAction(action)\n      actions = board.getActions()\n    }\n\n    this.updateStatistic(rootAction, board.getResult())\n  }\n  updateStatistic(action, score) {\n    let target = this.statistic.find(item => item.action === action)\n    if (!target) {\n      this.statistic.push({\n        action: action,\n        score: score,\n        visited: 1\n      })\n    } else {\n      target.score += score\n      target.visited += 1\n    }\n  }\n  getBestAction() {\n    let qualityList = this.statistic.map(item => ({\n      action: item.action,\n      quality: item.score / item.visited\n    }))\n    return qualityList.reduce(\n      (best, current) => (current.quality > best.quality ? current : best)\n    ).action\n  }\n}\n","export default class MCTS {\n\tconstructor(board) {\n\t\tthis.originalBoard = board\n\t\tthis.board = null\n\t}\n\trun(iterations) {\n\t\tlet count = Number(iterations)\n\t\tlet root = new MCTSNode(null, this.originalBoard.getActions(), null)\n\t\twhile (count--) {\n\t\t\tthis.board = this.originalBoard.clone()\n\t\t\tlet node = root\n\t\t\tnode = this.Selection(node)\n\t\t\tnode = this.Expanstion(node)\n\t\t\tthis.Simulation(node)\n\t\t\tthis.Backpropagation(node)\n\t\t}\n\t\treturn root.getBestAction()\n\t}\n\tSelection(node) {\n\t\twhile (!node.hasUnexaminedAction() && node.children.length > 0) {\n\t\t\tnode = node.selectChild()\n\t\t\tthis.board.doAction(node.action)\n\t\t}\n\t\treturn node\n\t}\n\tExpanstion(node) {\n\t\tif (node.hasUnexaminedAction()) {\n\t\t\tlet unexamineAction = node.getUnexamineActionRandomly()\n\t\t\tthis.board.doAction(unexamineAction)\n\t\t\tnode = node.addChild(unexamineAction, this.board.getActions())\n\t\t}\n\t\treturn node\n\t}\n\tSimulation(node) {\n\t\tlet actions = this.board.getActions()\n\t\twhile (actions.length > 0) {\n\t\t\tlet randomAction = actions[Math.floor(Math.random() * actions.length)]\n\t\t\tthis.board.doAction(randomAction)\n\t\t\tactions = this.board.getActions()\n\t\t}\n\t}\n\tBackpropagation(node) {\n\t\tnode.updateStatistic(this.board.getResult())\n\t}\n}\n\nclass MCTSNode {\n\tconstructor(action, nextActions, parent = null) {\n\t\tthis.action = action\n\t\tthis.nextActions = nextActions || []\n\t\tthis.children = []\n\t\tthis.wins = 0\n\t\tthis.visits = 0\n\t\tthis.parent = parent\n\t}\n\tisRoot() {\n\t\treturn !this.parent\n\t}\n\thasUnexaminedAction() {\n\t\treturn this.nextActions.length > 0\n\t}\n\tgetUnexamineActionRandomly() {\n\t\tlet index = Math.floor(Math.random() * this.nextActions.length)\n\t\tlet action = this.nextActions.splice(index, 1)[0]\n\t\treturn action\n\t}\n\tgetScore() {\n\t\treturn this.visits > 0 ? this.wins / this.visits : 0\n\t}\n\tgetBestChild() {\n\t\tlet best = this.children[0]\n\t\tfor (let i = 1; i < this.children.length; i++) {\n\t\t\tlet child = this.children[i]\n\t\t\tif (child.getScore() > best.getScore()) {\n\t\t\t\tbest = child\n\t\t\t}\n\t\t}\n\t\treturn best\n\t}\n\tgetBestAction() {\n\t\treturn this.getBestChild().action\n\t}\n\taddChild(action, nextActions) {\n\t\tlet child = new MCTSNode(action, nextActions, this)\n\t\tthis.children.push(child)\n\t\treturn child\n\t}\n\tselectChild() {\n\t\treturn this.children[Math.floor(Math.random() * this.children.length)]\n\t}\n\tupdateStatistic(wins = 0) {\n\t\tthis.visits += 1\n\t\tthis.wins += wins\n\t\tif (!this.isRoot()) {\n\t\t\tthis.parent.updateStatistic(wins)\n\t\t}\n\t}\n}\n","export default class UCT {\n  constructor(board) {\n    this.originalBoard = board\n    this.board = null\n  }\n  run(iterations) {\n    let count = Number(iterations)\n    let root = new UCTNode(null, this.originalBoard.getActions(), null)\n    while (count--) {\n      this.board = this.originalBoard.clone()\n      let node = root\n      node = this.Selection(node)\n      node = this.Expanstion(node)\n      this.Simulation()\n      this.Backpropagation(node)\n    }\n    return root.getBestAction()\n  }\n  Selection(node) {\n    while (!node.hasUnexaminedAction() && node.children.length > 0) {\n      node = node.selectChild()\n      this.board.doAction(node.action)\n    }\n    return node\n  }\n  Expanstion(node) {\n    if (node.hasUnexaminedAction()) {\n      let unexamineAction = node.getUnexamineActionRandomly()\n      this.board.doAction(unexamineAction)\n      node = node.addChild(unexamineAction, this.board.getActions())\n    }\n    return node\n  }\n  Simulation() {\n    let actions = this.board.getActions()\n    while (actions.length > 0) {\n      let randomAction = actions[Math.floor(Math.random() * actions.length)]\n      this.board.doAction(randomAction)\n      actions = this.board.getActions()\n    }\n  }\n  Backpropagation(node) {\n    node.updateStatistic(this.board.getResult())\n  }\n}\n\nclass UCTNode {\n  constructor(action, nextActions, parent = null) {\n    this.action = action\n    this.nextActions = nextActions || []\n    this.children = []\n    this.wins = 0\n    this.visits = 0\n    this.parent = parent\n  }\n  isRoot() {\n    return !this.parent\n  }\n  hasUnexaminedAction() {\n    return this.nextActions.length > 0\n  }\n  getUnexamineActionRandomly() {\n    let index = Math.floor(Math.random() * this.nextActions.length)\n    let action = this.nextActions.splice(index, 1)[0]\n    return action\n  }\n  getScore() {\n    return this.visits > 0 ? this.wins / this.visits : 0\n  }\n  getBestChild() {\n    let best = this.children[0]\n    for (let i = 1; i < this.children.length; i++) {\n      let child = this.children[i]\n      if (child.visits > best.visits) {\n        best = child\n      } else if (child.visits === best.visits) {\n        best = child.wins > best.wins ? child : best\n      }\n    }\n    return best\n  }\n  getBestAction() {\n    return this.getBestChild().action\n  }\n  getUCTValue() {\n    let averageReward = this.getScore()\n    let parameter = this.parent.getScore()\n    let bias =\n      parameter * Math.sqrt(2 * Math.log(this.parent.visits) / this.visits)\n    return averageReward + bias\n  }\n  addChild(action, nextActions) {\n    let child = new UCTNode(action, nextActions, this)\n    this.children.push(child)\n    return child\n  }\n  selectChild() {\n    let selected = this.children[0]\n    for (var i = 1; i < this.children.length; i++) {\n      let child = this.children[i]\n      if (child.getUCTValue() > selected.getUCTValue()) {\n        selected = child\n      }\n    }\n    return selected\n  }\n  updateStatistic(wins = 0) {\n    this.visits += 1\n    this.wins += wins\n    if (!this.isRoot()) {\n      this.parent.updateStatistic(wins)\n    }\n  }\n}\n","import { activation  } from './util'\n\nexport default class MCNNS {\n  constructor({ network, digitLength = 5, activationType }) {\n    this.board = new Board({\n      network,\n      digitLength\n    })\n    this.activationType = activationType\n    this.uct = new UCT(this.board)\n    this.collection = null\n  }\n  getModelList(iterations = 0) {\n    let getModel = ({ board }) => inputs =>\n      computeNetwork(board.network, inputs, this.activationType)\n    this.collection = this.uct.run(iterations)\n    return this.collection.map(getModel)\n  }\n  handleFeedback(resultList) {\n    resultList.forEach((result, index) => {\n      let { node, score } = this.collection[index]\n      node.fixStatistic(result - score)\n    })\n  }\n}\n\nclass UCT {\n  constructor(board) {\n    this.originalBoard = board\n    this.board = null\n    this.root = new UCTNode(null, this.originalBoard.getActions(), null)\n  }\n  run(iterations) {\n    let collection = Array.from({ length: Number(iterations) }).map(() =>\n      this.runOnce()\n    )\n    return collection\n  }\n  runOnce() {\n    let node = this.root\n    this.board = this.originalBoard.clone()\n    node = this.Selection(node)\n    node = this.Expanstion(node)\n    this.Simulation()\n    let score = !node.isRoot() ? node.parent.getScore() : 0\n    this.Backpropagation(node, score)\n    return {\n      score: score,\n      node: node,\n      board: this.board\n    }\n  }\n  Selection(node) {\n    while (!node.hasUnexaminedAction() && node.children.length > 0) {\n      node = node.selectChild()\n      this.board.doAction(node.action)\n    }\n    return node\n  }\n  Expanstion(node) {\n    if (node.hasUnexaminedAction()) {\n      let unexamineAction = node.getUnexamineActionRandomly()\n      this.board.doAction(unexamineAction)\n      node = node.addChild(unexamineAction, this.board.getActions())\n    }\n    return node\n  }\n  Simulation() {\n    let actions = this.board.getActions()\n    while (actions.length > 0) {\n      let randomAction = actions[Math.floor(Math.random() * actions.length)]\n      this.board.doAction(randomAction)\n      actions = this.board.getActions()\n    }\n  }\n  Backpropagation(node, score) {\n    node.updateStatistic(score)\n  }\n}\n\nclass UCTNode {\n  constructor(action, nextActions, parent = null) {\n    this.action = action\n    this.nextActions = nextActions || []\n    this.children = []\n    this.wins = 0\n    this.visits = 0\n    this.parent = parent\n  }\n  isRoot() {\n    return !this.parent\n  }\n  hasUnexaminedAction() {\n    return this.nextActions.length > 0\n  }\n  getUnexamineActionRandomly() {\n    let index = Math.floor(Math.random() * this.nextActions.length)\n    let action = this.nextActions.splice(index, 1)[0]\n    return action\n  }\n  getScore() {\n    return this.visits > 0 ? this.wins / this.visits : 0\n  }\n  getBestChild() {\n    let best = this.children[0]\n    for (let i = 1; i < this.children.length; i++) {\n      let child = this.children[i]\n      if (child.visits > best.visits) {\n        best = child\n      } else if (child.visits === best.visits) {\n        best = child.wins > best.wins ? child : best\n      }\n    }\n    return best\n  }\n  getBestAction() {\n    return this.getBestChild().action\n  }\n  getUCTValue() {\n    let averageReward = this.getScore()\n    let parameter = this.parent.getScore() * 4\n    let bias =\n      parameter * Math.sqrt(2 * Math.log(this.parent.visits) / this.visits)\n    return averageReward + bias\n  }\n  addChild(action, nextActions) {\n    let child = new UCTNode(action, nextActions, this)\n    this.children.push(child)\n    return child\n  }\n  selectChild() {\n    let selected = this.children[0]\n    for (var i = 1; i < this.children.length; i++) {\n      let child = this.children[i]\n      let childUctValue = child.getUCTValue()\n      let selectedUctValue = selected.getUCTValue()\n      if (childUctValue > selectedUctValue) {\n        selected = child\n      } else if (childUctValue === selectedUctValue && Math.random() > 0.5) {\n        selected = child\n      }\n    }\n    return selected\n  }\n  updateStatistic(wins = 0) {\n    this.visits += 1\n    this.wins += wins\n    if (!this.isRoot()) {\n      this.parent.updateStatistic(wins)\n    }\n  }\n  fixStatistic(wins) {\n    this.wins += wins\n    if (!this.isRoot()) {\n      this.parent.updateStatistic(wins)\n    }\n  }\n}\n\nclass Board {\n  constructor({ network, digitLength = 5, weightIndex = 0, digitIndex = 0 }) {\n    this.network = createNetwork(network)\n    this.weightList = getWeightList(this.network)\n    this.digitLength = digitLength\n    this.weightIndex = weightIndex\n    this.digitIndex = digitIndex\n  }\n  clone() {\n    let board = Object.assign(Object.create(Board.prototype), this)\n    board.network = cloneNetwork(this.network)\n    board.weightList = getWeightList(board.network)\n    return board\n  }\n  getActions() {\n    if (this.digitIndex < this.digitLength) {\n      return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    } else {\n      return []\n    }\n  }\n  doAction(digit) {\n    this.weightList[this.weightIndex][this.digitIndex] = digit\n    this.weightIndex += 1\n    if (this.weightIndex === this.weightList.length) {\n      this.weightIndex = 0\n      this.digitIndex += 1\n    }\n  }\n}\n\nfunction createNetwork(options) {\n  let network = []\n  let previousInputs = options[0]\n  for (let i = 1; i < options.length; i++) {\n    let currentLayer = []\n    for (let j = 0; j < options[i]; j++) {\n      let currentNode = []\n      for (let k = 0; k < previousInputs; k++) {\n        currentNode.push([])\n      }\n      currentLayer.push(currentNode)\n    }\n    previousInputs = currentLayer.length\n    network.push(currentLayer)\n  }\n  return network\n}\n\nfunction computeNetwork(network, inputs, activationType = 'SIGMOID') {\n  let currentInputs = inputs\n  let networkResult = [inputs.concat()]\n  for (let i = 0; i < network.length; i++) {\n    let currentLayer = network[i]\n    let currentLayerResult = []\n    for (let j = 0; j < currentLayer.length; j++) {\n      let currentNode = currentLayer[j]\n      let sum = 0\n      for (let k = 0; k < currentNode.length; k++) {\n        let currentWeight = Number(`0.${currentNode[k].slice(0).join('')}`)\n        sum += currentInputs[k] * currentWeight\n      }\n      let currentNodeResult = getActivation(activationType, i).output(sum)\n      currentLayerResult.push(currentNodeResult)\n    }\n    networkResult.push(currentLayerResult)\n    currentInputs = currentLayerResult\n  }\n  return networkResult\n}\n\nfunction getActivation(type, layerIndex) {\n  if (typeof type === 'string') {\n    return activation[type]\n  } else if (Array.isArray(type)) {\n    return activation[type[layerIndex]]\n  }\n}\n\nfunction walk(network, accessor) {\n  for (let i = 0; i < network.length; i++) {\n    let currentLayer = network[i]\n    for (let j = 0; j < currentLayer.length; j++) {\n      let currentNode = currentLayer[j]\n      for (let k = 0; k < currentNode.length; k++) {\n        let currentWeight = currentNode[k]\n        accessor({\n          weight: currentWeight,\n          node: currentNode,\n          layer: currentLayer,\n          network: network,\n          path: [i, j, k]\n        })\n      }\n    }\n  }\n}\n\nfunction getWeightList(network) {\n  let weightList = []\n  walk(network, data => weightList.push(data.weight))\n  return weightList\n}\n\nfunction cloneNetwork(network) {\n  return JSON.parse(JSON.stringify(network))\n}\n","import * as network from './network'\nimport createBackPropagation from './createBackPropagation'\nimport createEvolution from './createEvolution'\nimport MCM from './MCM'\nimport MCTS from './MCTS'\nimport UCT from './UCT'\nimport MCNNS from './MCNNS'\n\nexport default {\n  network: network,\n  createBackPropagation: createBackPropagation,\n  createEvolution: createEvolution,\n  MCM: MCM,\n  MCTS: MCTS,\n  UCT: UCT,\n  MCNNS: MCNNS,\n}\n"],"names":["randomClamped","Math","random","randomBoolean","identity","x","RELU","max","RELU_DERIVATIVE","SIGMOID","exp","SIGMOID_DERIVATIVE","TANH","Infinity","e2x","TANH_DERIVATIVE","activation","output","derivative","create","options","network","previousInputs","i","length","currentLayer","j","currentNode","k","randomWeight","push","compute","inputs","activationType","currentInputs","networkResult","concat","currentLayerResult","sum","currentWeight","currentNodeResult","getActivation","type","layerIndex","Array","isArray","walk","accessor","weight","node","layer","path","copy","JSON","parse","stringify","isEqual","aNetwork","bNetwork","defaults","learningRate","createBackPropagation","settings","Object","assign","$network","getNetwork","replaceNetwork","newNetwork","index","results","computeError","labels","errors","lastResult","error","computeNetworkError","adjust","networkError","updateNetworkWeights","train","inputErrors","nextLayer","layerError","nodeError","unshift","data","currentInput","currentResult","currentError","currentActivation","deltaWeight","newWeight","amount","elitismRate","randomRate","mixNumber","mutation","rate","range","createEvolution","networks","createNetworks","eachNetwork","handleNetwork","forEach","updateAmount","targetAmount","currentAmount","getNetworks","replaceNetworks","newNetworks","sortNetworks","ranks","elitismAmount","round","randomAmount","mixNetwork","targetNetwork","sourceNetwork","sourceWeight","MCM","board","originalBoard","statistic","iterations","total","Number","actions","getActions","count","floor","simulate","getBestAction","rootAction","clone","doAction","action","updateStatistic","getResult","score","target","find","item","visited","qualityList","map","quality","reduce","best","current","MCTS","root","MCTSNode","Selection","Expanstion","Simulation","Backpropagation","hasUnexaminedAction","children","selectChild","unexamineAction","getUnexamineActionRandomly","addChild","randomAction","nextActions","parent","wins","visits","splice","child","getScore","getBestChild","isRoot","UCT","UCTNode","averageReward","parameter","bias","sqrt","log","selected","getUCTValue","MCNNS","digitLength","Board","uct","collection","getModel","computeNetwork","run","resultList","result","fixStatistic","from","runOnce","childUctValue","selectedUctValue","weightIndex","digitIndex","createNetwork","weightList","getWeightList","prototype","cloneNetwork","digit","slice","join"],"mappings":";;;;;;CAAO,SAASA,aAAT,GAAyB;CAC/B,SAAOC,IAAI,CAACC,MAAL,KAAgB,CAAhB,GAAoB,CAA3B;CACA;CAEM,SAASC,aAAT,GAAyB;CAC/B,SAAOF,IAAI,CAACC,MAAL,MAAiB,GAAxB;CACA;CAEM,SAASE,QAAT,CAAkBC,CAAlB,EAAqB;CAC3B,SAAOA,CAAP;CACA;;CAID,SAASC,IAAT,CAAcD,CAAd,EAAiB;CAChB,SAAOJ,IAAI,CAACM,GAAL,CAAS,CAAT,EAAYF,CAAZ,CAAP;CACA;;CAED,SAASG,eAAT,CAAyBH,CAAzB,EAA4B;CAC3B,SAAOA,CAAC,IAAI,CAAL,GAAS,CAAT,GAAa,CAApB;CACA;;CAED,SAASI,OAAT,CAAiBJ,CAAjB,EAAoB;CACnB,SAAO,KAAK,IAAIJ,IAAI,CAACS,GAAL,CAAS,CAACL,CAAD,GAAK,CAAd,CAAT,CAAP;CACA;;CAED,SAASM,kBAAT,CAA4BN,CAA5B,EAA+B;CAC9B,SAAOA,CAAC,IAAI,IAAIA,CAAR,CAAR;CACA;;CAED,SAASO,IAAT,CAAcP,CAAd,EAAiB;CAChB,MAAIA,CAAC,KAAKQ,QAAV,EAAoB;CACnB,WAAO,CAAP;CACA,GAFD,MAEO,IAAIR,CAAC,KAAK,CAACQ,QAAX,EAAqB;CAC3B,WAAO,CAAC,CAAR;CACA,GAFM,MAEA;CACN,QAAIC,GAAG,GAAGb,IAAI,CAACS,GAAL,CAAS,IAAIL,CAAb,CAAV;CACA,WAAO,CAACS,GAAG,GAAG,CAAP,KAAaA,GAAG,GAAG,CAAnB,CAAP;CACA;CACD;;CAED,SAASC,eAAT,CAAyBV,CAAzB,EAA4B;CAC3B,SAAO,IAAIA,CAAC,GAAGA,CAAf;CACA;;CAUD,IAAMW,UAAU,GAAG;CAClBV,EAAAA,IAAI,EAAE;CACLW,IAAAA,MAAM,EAAEX,IADH;CAELY,IAAAA,UAAU,EAAEV;CAFP,GADY;CAKlBC,EAAAA,OAAO,EAAE;CACRQ,IAAAA,MAAM,EAAER,OADA;CAERS,IAAAA,UAAU,EAAEP;CAFJ,GALS;CASlBC,EAAAA,IAAI,EAAE;CACLK,IAAAA,MAAM,EAAEL,IADH;CAELM,IAAAA,UAAU,EAAEH;CAFP;CATY,CAAnB;;CChDO,SAASI,MAAT,CAAgBC,OAAhB,EAAyB;CAC/B,MAAIC,OAAO,GAAG,EAAd;CACA,MAAIC,cAAc,GAAGF,OAAO,CAAC,CAAD,CAA5B;;CACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACI,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;CACxC,QAAIE,YAAY,GAAG,EAAnB;;CACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,OAAO,CAACG,CAAD,CAA3B,EAAgCG,CAAC,EAAjC,EAAqC;CACpC,UAAIC,WAAW,GAAG,EAAlB;;CACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,cAApB,EAAoCM,CAAC,EAArC,EAAyC;CACxC,YAAIC,YAAY,GAAG7B,aAAa,EAAhC;CACA2B,QAAAA,WAAW,CAACG,IAAZ,CAAiBD,YAAjB;CACA;;CACDJ,MAAAA,YAAY,CAACK,IAAb,CAAkBH,WAAlB;CACA;;CACDL,IAAAA,cAAc,GAAGG,YAAY,CAACD,MAA9B;CACAH,IAAAA,OAAO,CAACS,IAAR,CAAaL,YAAb;CACA;;CACD,SAAOJ,OAAP;CACA;CAEM,SAASU,OAAT,CAAiBV,OAAjB,EAA0BW,MAA1B,EAA4D;CAAA,MAA1BC,cAA0B,uEAAX,SAAW;CAClE,MAAIC,aAAa,GAAGF,MAApB;CACA,MAAIG,aAAa,GAAG,CAACH,MAAM,CAACI,MAAP,EAAD,CAApB;;CACA,OAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;CACxC,QAAIE,YAAY,GAAGJ,OAAO,CAACE,CAAD,CAA1B;CACA,QAAIc,kBAAkB,GAAG,EAAzB;;CACA,SAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAAY,CAACD,MAAjC,EAAyCE,CAAC,EAA1C,EAA8C;CAC7C,UAAIC,WAAW,GAAGF,YAAY,CAACC,CAAD,CAA9B;CACA,UAAIY,GAAG,GAAG,CAAV;;CACA,WAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACH,MAAhC,EAAwCI,CAAC,EAAzC,EAA6C;CAC5C,YAAIW,aAAa,GAAGZ,WAAW,CAACC,CAAD,CAA/B;CACAU,QAAAA,GAAG,IAAIJ,aAAa,CAACN,CAAD,CAAb,GAAmBW,aAA1B;CACA;;CACD,UAAIC,iBAAiB,GAAGC,eAAa,CAACR,cAAD,EAAiBV,CAAjB,CAAb,CAAiCN,MAAjC,CAAwCqB,GAAxC,CAAxB;CACAD,MAAAA,kBAAkB,CAACP,IAAnB,CAAwBU,iBAAxB;CACA;;CACDL,IAAAA,aAAa,CAACL,IAAd,CAAmBO,kBAAnB;CACAH,IAAAA,aAAa,GAAGG,kBAAhB;CACA;;CACD,SAAOF,aAAP;CACA;CAEM,SAASM,eAAT,CAAuBC,IAAvB,EAA6BC,UAA7B,EAAyC;CAC/C,MAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;CAC7B,WAAO1B,UAAU,CAAC0B,IAAD,CAAjB;CACA,GAFD,MAEO,IAAIE,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;CAC/B,WAAO1B,UAAU,CAAC0B,IAAI,CAACC,UAAD,CAAL,CAAjB;CACA;CACD;CAEM,SAASG,MAAT,CAAczB,OAAd,EAAuB0B,QAAvB,EAAiC;CACvC,OAAK,IAAIxB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;CACxC,QAAIE,YAAY,GAAGJ,OAAO,CAACE,CAAD,CAA1B;;CACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAAY,CAACD,MAAjC,EAAyCE,CAAC,EAA1C,EAA8C;CAC7C,UAAIC,WAAW,GAAGF,YAAY,CAACC,CAAD,CAA9B;;CACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACH,MAAhC,EAAwCI,CAAC,EAAzC,EAA6C;CAC5C,YAAIW,aAAa,GAAGZ,WAAW,CAACC,CAAD,CAA/B;CACAmB,QAAAA,QAAQ,CAAC;CACRC,UAAAA,MAAM,EAAET,aADA;CAERU,UAAAA,IAAI,EAAEtB,WAFE;CAGRuB,UAAAA,KAAK,EAAEzB,YAHC;CAIRJ,UAAAA,OAAO,EAAEA,OAJD;CAKR8B,UAAAA,IAAI,EAAE,CAAC5B,CAAD,EAAIG,CAAJ,EAAOE,CAAP;CALE,SAAD,CAAR;CAOA;CACD;CACD;CACD;CAEM,SAASwB,IAAT,CAAc/B,OAAd,EAAuB;CAC7B,SAAOgC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAelC,OAAf,CAAX,CAAP;CACA;CAEM,SAASmC,OAAT,CAAiBC,QAAjB,EAA2BC,QAA3B,EAAqC;CAC3C,SAAOL,IAAI,CAACE,SAAL,CAAeE,QAAf,MAA6BJ,IAAI,CAACE,SAAL,CAAeG,QAAf,CAApC;CACA;;;;;;;;;;;;CC5ED,IAAMC,UAAQ,GAAG;CAChBtC,EAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADO;CAEhBL,EAAAA,UAAU,EAAE,SAFI;CAGhB4C,EAAAA,YAAY,EAAE,GAHE;CAIhB3C,EAAAA,MAAM,EAAEb;CAJQ,CAAjB;CAOe,SAASyD,qBAAT,CAA+BC,QAA/B,EAAyC;CACvD,MAAI1C,OAAO,GAAG2C,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,UAAlB,EAA4BG,QAA5B,CAAd;CACA,MAAIzC,SAAO,GAAG4C,MAAA,CAAgB7C,OAAO,CAACC,OAAxB,CAAd;CACA,MAAIc,aAAa,GAAG,IAApB;;CAEA,WAAS+B,UAAT,GAAsB;CACrB,WAAO7C,SAAP;CACA;;CAED,WAAS8C,cAAT,CAAwBC,UAAxB,EAAoC;CACnC/C,IAAAA,SAAO,GAAG+C,UAAV;CACA;;CAED,WAASrC,SAAT,CAAiBC,MAAjB,EAAyB;CACxBG,IAAAA,aAAa,GAAG8B,OAAA,CACf5C,SADe,EAEfW,MAFe,EAGfZ,OAAO,CAACJ,UAHO,CAAhB;CAKA,WAAOmB,aAAP;CACA;;CAED,WAASlB,MAAT,CAAgBoD,KAAhB,EAAuBrC,MAAvB,EAA+B;CAC9B,QAAIsC,OAAO,GAAGvC,SAAO,CAACC,MAAD,CAArB;CACA,WAAOZ,OAAO,CAACH,MAAR,CAAeqD,OAAO,CAACA,OAAO,CAAC9C,MAAR,GAAiB,CAAlB,CAAtB,CAAP;CACA;;CAED,WAAS+C,YAAT,CAAsBC,MAAtB,EAA8B;CAC7B,QAAIC,MAAM,GAAG,EAAb;CACA,QAAIC,UAAU,GAAGvC,aAAa,CAACA,aAAa,CAACX,MAAd,GAAuB,CAAxB,CAA9B;;CACA,SAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGiD,MAAM,CAAChD,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;CACvC,UAAIoD,KAAK,GAAGD,UAAU,CAACnD,CAAD,CAAV,GAAgBiD,MAAM,CAACjD,CAAD,CAAlC;CACAkD,MAAAA,MAAM,CAAC3C,IAAP,CAAY6C,KAAZ;CACA;;CACD,WAAOC,mBAAmB,CAACvD,SAAD,EAAUoD,MAAV,CAA1B;CACA;;CAED,WAASI,MAAT,CAAgBL,MAAhB,EAA2D;CAAA,QAAnCZ,YAAmC,uEAAtBxC,OAAO,CAACwC,YAAc;CAC1D,QAAIkB,YAAY,GAAGP,YAAY,CAACC,MAAD,CAA/B;CACAO,IAAAA,oBAAoB,CACnB1D,SADmB,EAEnBc,aAFmB,EAGnB2C,YAHmB,EAInB1D,OAAO,CAACJ,UAJW,EAKnB4C,YALmB,CAApB;CAOA;;CAED,WAASoB,KAAT,CAAehD,MAAf,EAAuBwC,MAAvB,EAA+B;CAC9BzC,IAAAA,SAAO,CAACC,MAAD,CAAP;CACA6C,IAAAA,MAAM,CAACL,MAAD,CAAN;CACA;;CAED,SAAO;CACNpD,IAAAA,OAAO,EAAEA,OADH;CAEN8C,IAAAA,UAAU,EAAEA,UAFN;CAGNC,IAAAA,cAAc,EAAEA,cAHV;CAINpC,IAAAA,OAAO,EAAEA,SAJH;CAKN8C,IAAAA,MAAM,EAAEA,MALF;CAMNG,IAAAA,KAAK,EAAEA,KAND;CAON/D,IAAAA,MAAM,EAAEA;CAPF,GAAP;CASA;;CAED,SAAS2D,mBAAT,CAA6BvD,OAA7B,EAAsCoD,MAAtC,EAA8C;CAC7C,MAAIK,YAAY,GAAG,CAACL,MAAM,CAACrC,MAAP,EAAD,CAAnB;CACA,MAAI6C,WAAW,GAAGR,MAAlB;;CAEA,OAAK,IAAIlD,CAAC,GAAGF,OAAO,CAACG,MAAR,GAAiB,CAA9B,EAAiCD,CAAC,IAAI,CAAtC,EAAyCA,CAAC,EAA1C,EAA8C;CAC7C,QAAIE,YAAY,GAAGJ,OAAO,CAACE,CAAD,CAA1B;CACA,QAAI2D,SAAS,GAAG7D,OAAO,CAACE,CAAC,GAAG,CAAL,CAAvB;CACA,QAAI4D,UAAU,GAAG,EAAjB;;CACA,SAAK,IAAIzD,CAAC,GAAGD,YAAY,CAACD,MAAb,GAAsB,CAAnC,EAAsCE,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;CAClD,UAAI0D,SAAS,GAAG,CAAhB;;CACA,WAAK,IAAIxD,CAAC,GAAGsD,SAAS,CAAC1D,MAAV,GAAmB,CAAhC,EAAmCI,CAAC,IAAI,CAAxC,EAA2CA,CAAC,EAA5C,EAAgD;CAC/C,YAAIoB,MAAM,GAAGkC,SAAS,CAACtD,CAAD,CAAT,CAAaF,CAAb,CAAb;CACA0D,QAAAA,SAAS,IAAIH,WAAW,CAACrD,CAAD,CAAX,GAAiBoB,MAA9B;CACA;;CACDmC,MAAAA,UAAU,CAACE,OAAX,CAAmBD,SAAnB;CACA;;CACDN,IAAAA,YAAY,CAACO,OAAb,CAAqBF,UAArB;CACAF,IAAAA,WAAW,GAAGE,UAAd;CACA;;CAED,SAAOL,YAAP;CACA;;CAED,SAASC,oBAAT,CAA8B1D,SAA9B,EAAuCc,aAAvC,EAAsD2C,YAAtD,EAAoE7C,cAApE,EAAoF2B,YAApF,EAAkG;CACjGK,EAAAA,MAAA,CAAc5C,SAAd,EAAuB,UAASiE,IAAT,EAAe;CACrC,QAAInC,IAAI,GAAGmC,IAAI,CAACnC,IAAhB;CACA,QAAIZ,aAAa,GAAGlB,SAAO,CAAC8B,IAAI,CAAC,CAAD,CAAL,CAAP,CAAiBA,IAAI,CAAC,CAAD,CAArB,EAA0BA,IAAI,CAAC,CAAD,CAA9B,CAApB;CACA,QAAIoC,YAAY,GAAGpD,aAAa,CAACgB,IAAI,CAAC,CAAD,CAAL,CAAb,CAAuBA,IAAI,CAAC,CAAD,CAA3B,CAAnB;CACA,QAAIqC,aAAa,GAAGrD,aAAa,CAACgB,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAX,CAAb,CAA2BA,IAAI,CAAC,CAAD,CAA/B,CAApB;CACA,QAAIsC,YAAY,GAAGX,YAAY,CAAC3B,IAAI,CAAC,CAAD,CAAL,CAAZ,CAAsBA,IAAI,CAAC,CAAD,CAA1B,CAAnB;CACA,QAAIuC,iBAAiB,GAAGzB,eAAA,CAAuBhC,cAAvB,EAAuCkB,IAAI,CAAC,CAAD,CAA3C,CAAxB;CACA,QAAIwC,WAAW,GAAG,CAAC/B,YAAD,GAAgB6B,YAAhB,GAA+BF,YAA/B,GAA8CG,iBAAiB,CAACxE,UAAlB,CAA6BsE,aAA7B,CAAhE;CACA,QAAII,SAAS,GAAGrD,aAAa,GAAGoD,WAAhC;CACAtE,IAAAA,SAAO,CAAC8B,IAAI,CAAC,CAAD,CAAL,CAAP,CAAiBA,IAAI,CAAC,CAAD,CAArB,EAA0BA,IAAI,CAAC,CAAD,CAA9B,IAAqCyC,SAArC;CACA,GAVD;CAWA;;CCtGD,IAAMjC,QAAQ,GAAG;CAChBtC,EAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADO;CAEhBwE,EAAAA,MAAM,EAAE,EAFQ;CAGhBC,EAAAA,WAAW,EAAE,GAHG;CAIhBC,EAAAA,UAAU,EAAE,GAJI;CAKhBC,EAAAA,SAAS,EAAE,CALK;CAMhBC,EAAAA,QAAQ,EAAE;CACTC,IAAAA,IAAI,EAAE,GADG;CAETC,IAAAA,KAAK,EAAE;CAFE,GANM;CAUhBnF,EAAAA,UAAU,EAAE,SAVI;CAWhBC,EAAAA,MAAM,EAAEb;CAXQ,CAAjB;CAce,SAASgG,eAAT,CAAyBtC,QAAzB,EAAmC;CACjD,MAAI1C,OAAO,GAAG2C,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,QAAlB,EAA4BG,QAA5B,CAAd;CACA,MAAIuC,QAAQ,GAAG,EAAf;;CAEA,WAASC,cAAT,CAAwBT,MAAxB,EAAgC;CAC/B,SAAK,IAAItE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGsE,MAApB,EAA4BtE,CAAC,EAA7B,EAAiC;CAChC,UAAIF,SAAO,GAAG4C,MAAA,CAAgB7C,OAAO,CAACC,OAAxB,CAAd;CACAgF,MAAAA,QAAQ,CAACvE,IAAT,CAAcT,SAAd;CACA;;CACDD,IAAAA,OAAO,CAACyE,MAAR,GAAiBQ,QAAQ,CAAC7E,MAA1B;CACA;;CAED,WAAS+E,WAAT,CAAqBC,aAArB,EAAoC;CACnCH,IAAAA,QAAQ,CAACI,OAAT,CAAiBD,aAAjB;CACA;;CAED,WAASE,YAAT,CAAsBC,YAAtB,EAAoC;CACnC,QAAIC,aAAa,GAAGP,QAAQ,CAAC7E,MAA7B;;CACA,QAAIoF,aAAa,GAAGD,YAApB,EAAkC;CACjCN,MAAAA,QAAQ,CAAC7E,MAAT,GAAkBmF,YAAlB;CACAvF,MAAAA,OAAO,CAACyE,MAAR,GAAiBc,YAAjB;CACA,KAHD,MAGO,IAAIC,aAAa,GAAGD,YAApB,EAAkC;CACxCL,MAAAA,cAAc,CAACK,YAAY,GAAGC,aAAhB,CAAd;CACA;CACD;;CAED,WAASC,WAAT,GAAuB;CACtB,WAAOR,QAAP;CACA;;CAED,WAASS,eAAT,CAAyBC,WAAzB,EAAsC;CACrCV,IAAAA,QAAQ,GAAGU,WAAX;CACA;;CAED,WAASC,YAAT,CAAsBC,KAAtB,EAA6B;CAC5B,QAAIF,WAAW,GAAG,EAAlB;;CACA,SAAK,IAAIxF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0F,KAAK,CAACzF,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;CACtCwF,MAAAA,WAAW,CAACjF,IAAZ,CAAiBuE,QAAQ,CAACY,KAAK,CAAC1F,CAAD,CAAN,CAAzB;CACA;;CACD8E,IAAAA,QAAQ,GAAGU,WAAX;CACA3F,IAAAA,OAAO,CAACyE,MAAR,GAAiBQ,QAAQ,CAAC7E,MAA1B;CACA;;CAED,WAASO,SAAT,CAAiBsC,KAAjB,EAAwBrC,MAAxB,EAAgC;CAC/B,WAAOiC,OAAA,CACNoC,QAAQ,CAAChC,KAAD,CADF,EAENrC,MAFM,EAGNZ,OAAO,CAACJ,UAHF,CAAP;CAKA;;CAED,WAASC,MAAT,CAAgBoD,KAAhB,EAAuBrC,MAAvB,EAA+B;CAC9B,QAAIsC,OAAO,GAAGvC,SAAO,CAACsC,KAAD,EAAQrC,MAAR,CAArB;CACA,WAAOZ,OAAO,CAACH,MAAR,CAAeqD,OAAO,CAACA,OAAO,CAAC9C,MAAR,GAAiB,CAAlB,CAAtB,CAAP;CACA;;CAED,WAASqD,MAAT,CAAgBoC,KAAhB,EAAuB;CACtB,QAAIA,KAAJ,EAAW;CACVD,MAAAA,YAAY,CAACC,KAAD,CAAZ;CACA;;CAED,QAAIF,WAAW,GAAG,EAAlB;CAEA,QAAIG,aAAa,GAAGjH,IAAI,CAACkH,KAAL,CAAW/F,OAAO,CAAC0E,WAAR,GAAsB1E,OAAO,CAACyE,MAAzC,CAApB;;CACA,SAAK,IAAItE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2F,aAApB,EAAmC3F,CAAC,EAApC,EAAwC;CACvCwF,MAAAA,WAAW,CAACjF,IAAZ,CAAiBuE,QAAQ,CAAC9E,CAAD,CAAzB;CACA;;CAED,QAAI6F,YAAY,GAAGnH,IAAI,CAACkH,KAAL,CAAW/F,OAAO,CAAC2E,UAAR,GAAqB3E,OAAO,CAACyE,MAAxC,CAAnB;;CACA,SAAK,IAAItE,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG6F,YAApB,EAAkC7F,EAAC,EAAnC,EAAuC;CACtCwF,MAAAA,WAAW,CAACjF,IAAZ,CAAiBmC,MAAA,CAAgB7C,OAAO,CAACC,OAAxB,CAAjB;CACA;;CAED,QAAId,GAAG,GAAG,CAAV;;CACA,WAAO,IAAP,EAAa;CACZ,WAAK,IAAIgB,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAGhB,GAApB,EAAyBgB,GAAC,EAA1B,EAA8B;CAC7B,aAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,OAAO,CAAC4E,SAA5B,EAAuCtE,CAAC,EAAxC,EAA4C;CAC3C,cAAI0C,UAAU,GAAGiD,UAAU,CAC1BpD,IAAA,CAAcoC,QAAQ,CAAC9E,GAAD,CAAtB,CAD0B,EAE1B8E,QAAQ,CAAC9F,GAAD,CAFkB,EAG1Ba,OAAO,CAAC6E,QAHkB,CAA3B;CAKAc,UAAAA,WAAW,CAACjF,IAAZ,CAAiBsC,UAAjB;;CACA,cAAI2C,WAAW,CAACvF,MAAZ,IAAsBJ,OAAO,CAACyE,MAAlC,EAA0C;CACzCkB,YAAAA,WAAW,CAACvF,MAAZ,GAAqBJ,OAAO,CAACyE,MAA7B;CACAQ,YAAAA,QAAQ,GAAGU,WAAX;CACA;CACA;CACD;CACD;;CACDxG,MAAAA,GAAG;;CACH,UAAIA,GAAG,KAAK8F,QAAQ,CAAC7E,MAArB,EAA6B;CAC5BjB,QAAAA,GAAG,GAAG,CAAN;CACA;CACD;CACD;;CAED+F,EAAAA,cAAc,CAAClF,OAAO,CAACyE,MAAT,CAAd;CAEA,SAAO;CACNzE,IAAAA,OAAO,EAAEA,OADH;CAENkF,IAAAA,cAAc,EAAEA,cAFV;CAGNC,IAAAA,WAAW,EAAEA,WAHP;CAINM,IAAAA,WAAW,EAAEA,WAJP;CAKNC,IAAAA,eAAe,EAAEA,eALX;CAMNE,IAAAA,YAAY,EAAEA,YANR;CAONN,IAAAA,YAAY,EAAEA,YAPR;CAQN3E,IAAAA,OAAO,EAAEA,SARH;CASN8C,IAAAA,MAAM,EAAEA,MATF;CAUN5D,IAAAA,MAAM,EAAEA;CAVF,GAAP;CAYA;;CAED,SAASoG,UAAT,CAAoBC,aAApB,EAAmCC,aAAnC,EAAkDtB,QAAlD,EAA4D;CAC3DhC,EAAAA,MAAA,CAAcqD,aAAd,EAA6B,UAAShC,IAAT,EAAe;CAC3C,QAAInC,IAAI,GAAGmC,IAAI,CAACnC,IAAhB;;CACA,QAAIhD,aAAa,EAAjB,EAAqB;CACpB,UAAIqH,YAAY,GAAGD,aAAa,CAACpE,IAAI,CAAC,CAAD,CAAL,CAAb,CAAuBA,IAAI,CAAC,CAAD,CAA3B,EAAgCA,IAAI,CAAC,CAAD,CAApC,CAAnB;CACAmE,MAAAA,aAAa,CAACnE,IAAI,CAAC,CAAD,CAAL,CAAb,CAAuBA,IAAI,CAAC,CAAD,CAA3B,EAAgCA,IAAI,CAAC,CAAD,CAApC,IAA2CqE,YAA3C;CACA;;CACD,QAAIvH,IAAI,CAACC,MAAL,MAAiB+F,QAAQ,CAACC,IAA9B,EAAoC;CACnCoB,MAAAA,aAAa,CAACnE,IAAI,CAAC,CAAD,CAAL,CAAb,CAAuBA,IAAI,CAAC,CAAD,CAA3B,EAAgCA,IAAI,CAAC,CAAD,CAApC,KAA4C8C,QAAQ,CAACE,KAAT,GAAiBnG,aAAa,EAA1E;CACA;CACD,GATD;CAUA,SAAOsH,aAAP;CACA;;;;;;;;;;;;;;;;;;;;;;;;KClJoBG;CACnB,eAAYC,KAAZ,EAAmB;CAAA;;CACjB,SAAKC,aAAL,GAAqBD,KAArB;CACA,SAAKE,SAAL,GAAiB,EAAjB;CACD;;;;YACD,aAAIC,UAAJ,EAAgB;CACd,UAAIC,KAAK,GAAGC,MAAM,CAACF,UAAD,CAAlB;CACA,UAAIG,OAAO,GAAG,KAAKL,aAAL,CAAmBM,UAAnB,EAAd;;CAEA,WAAK,IAAI1G,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyG,OAAO,CAACxG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;CAC1C,YAAI2G,KAAK,GAAGjI,IAAI,CAACkI,KAAL,CAAWL,KAAK,GAAGE,OAAO,CAACxG,MAA3B,CAAZ;;CACG,eAAO0G,KAAK,EAAZ,EAAgB;CACd,eAAKE,QAAL,CAAcJ,OAAO,CAACzG,CAAD,CAArB;CACD;CACF;;CAED,aAAO,KAAK8G,aAAL,EAAP;CACD;;;YACD,kBAASC,UAAT,EAAqB;CACnB,UAAIZ,KAAK,GAAG,KAAKC,aAAL,CAAmBY,KAAnB,EAAZ;CACAb,MAAAA,KAAK,CAACc,QAAN,CAAeF,UAAf;CAEA,UAAIN,OAAO,GAAGN,KAAK,CAACO,UAAN,EAAd;;CACA,aAAOD,OAAO,CAACxG,MAAf,EAAuB;CACrB,YAAIiH,MAAM,GAAGT,OAAO,CAAC/H,IAAI,CAACkI,KAAL,CAAWlI,IAAI,CAACC,MAAL,KAAgB8H,OAAO,CAACxG,MAAnC,CAAD,CAApB;CACAkG,QAAAA,KAAK,CAACc,QAAN,CAAeC,MAAf;CACAT,QAAAA,OAAO,GAAGN,KAAK,CAACO,UAAN,EAAV;CACD;;CAED,WAAKS,eAAL,CAAqBJ,UAArB,EAAiCZ,KAAK,CAACiB,SAAN,EAAjC;CACD;;;YACD,yBAAgBF,MAAhB,EAAwBG,KAAxB,EAA+B;CAC7B,UAAIC,MAAM,GAAG,KAAKjB,SAAL,CAAekB,IAAf,CAAoB,UAAAC,IAAI;CAAA,eAAIA,IAAI,CAACN,MAAL,KAAgBA,MAApB;CAAA,OAAxB,CAAb;;CACA,UAAI,CAACI,MAAL,EAAa;CACX,aAAKjB,SAAL,CAAe9F,IAAf,CAAoB;CAClB2G,UAAAA,MAAM,EAAEA,MADU;CAElBG,UAAAA,KAAK,EAAEA,KAFW;CAGlBI,UAAAA,OAAO,EAAE;CAHS,SAApB;CAKD,OAND,MAMO;CACLH,QAAAA,MAAM,CAACD,KAAP,IAAgBA,KAAhB;CACAC,QAAAA,MAAM,CAACG,OAAP,IAAkB,CAAlB;CACD;CACF;;;YACD,yBAAgB;CACd,UAAIC,WAAW,GAAG,KAAKrB,SAAL,CAAesB,GAAf,CAAmB,UAAAH,IAAI;CAAA,eAAK;CAC5CN,UAAAA,MAAM,EAAEM,IAAI,CAACN,MAD+B;CAE5CU,UAAAA,OAAO,EAAEJ,IAAI,CAACH,KAAL,GAAaG,IAAI,CAACC;CAFiB,SAAL;CAAA,OAAvB,CAAlB;CAIA,aAAOC,WAAW,CAACG,MAAZ,CACL,UAACC,IAAD,EAAOC,OAAP;CAAA,eAAoBA,OAAO,CAACH,OAAR,GAAkBE,IAAI,CAACF,OAAvB,GAAiCG,OAAjC,GAA2CD,IAA/D;CAAA,OADK,EAELZ,MAFF;CAGD;;;;;;KCpDkBc;CACpB,gBAAY7B,KAAZ,EAAmB;CAAA;;CAClB,SAAKC,aAAL,GAAqBD,KAArB;CACA,SAAKA,KAAL,GAAa,IAAb;CACA;;;;YACD,aAAIG,UAAJ,EAAgB;CACf,UAAIK,KAAK,GAAGH,MAAM,CAACF,UAAD,CAAlB;CACA,UAAI2B,IAAI,GAAG,IAAIC,QAAJ,CAAa,IAAb,EAAmB,KAAK9B,aAAL,CAAmBM,UAAnB,EAAnB,EAAoD,IAApD,CAAX;;CACA,aAAOC,KAAK,EAAZ,EAAgB;CACf,aAAKR,KAAL,GAAa,KAAKC,aAAL,CAAmBY,KAAnB,EAAb;CACA,YAAItF,IAAI,GAAGuG,IAAX;CACAvG,QAAAA,IAAI,GAAG,KAAKyG,SAAL,CAAezG,IAAf,CAAP;CACAA,QAAAA,IAAI,GAAG,KAAK0G,UAAL,CAAgB1G,IAAhB,CAAP;CACA,aAAK2G,UAAL,CAAgB3G,IAAhB;CACA,aAAK4G,eAAL,CAAqB5G,IAArB;CACA;;CACD,aAAOuG,IAAI,CAACnB,aAAL,EAAP;CACA;;;YACD,mBAAUpF,IAAV,EAAgB;CACf,aAAO,CAACA,IAAI,CAAC6G,mBAAL,EAAD,IAA+B7G,IAAI,CAAC8G,QAAL,CAAcvI,MAAd,GAAuB,CAA7D,EAAgE;CAC/DyB,QAAAA,IAAI,GAAGA,IAAI,CAAC+G,WAAL,EAAP;CACA,aAAKtC,KAAL,CAAWc,QAAX,CAAoBvF,IAAI,CAACwF,MAAzB;CACA;;CACD,aAAOxF,IAAP;CACA;;;YACD,oBAAWA,IAAX,EAAiB;CAChB,UAAIA,IAAI,CAAC6G,mBAAL,EAAJ,EAAgC;CAC/B,YAAIG,eAAe,GAAGhH,IAAI,CAACiH,0BAAL,EAAtB;CACA,aAAKxC,KAAL,CAAWc,QAAX,CAAoByB,eAApB;CACAhH,QAAAA,IAAI,GAAGA,IAAI,CAACkH,QAAL,CAAcF,eAAd,EAA+B,KAAKvC,KAAL,CAAWO,UAAX,EAA/B,CAAP;CACA;;CACD,aAAOhF,IAAP;CACA;;;YACD,oBAAWA,IAAX,EAAiB;CAChB,UAAI+E,OAAO,GAAG,KAAKN,KAAL,CAAWO,UAAX,EAAd;;CACA,aAAOD,OAAO,CAACxG,MAAR,GAAiB,CAAxB,EAA2B;CAC1B,YAAI4I,YAAY,GAAGpC,OAAO,CAAC/H,IAAI,CAACkI,KAAL,CAAWlI,IAAI,CAACC,MAAL,KAAgB8H,OAAO,CAACxG,MAAnC,CAAD,CAA1B;CACA,aAAKkG,KAAL,CAAWc,QAAX,CAAoB4B,YAApB;CACApC,QAAAA,OAAO,GAAG,KAAKN,KAAL,CAAWO,UAAX,EAAV;CACA;CACD;;;YACD,yBAAgBhF,IAAhB,EAAsB;CACrBA,MAAAA,IAAI,CAACyF,eAAL,CAAqB,KAAKhB,KAAL,CAAWiB,SAAX,EAArB;CACA;;;;;;KAGIc;CACL,oBAAYhB,MAAZ,EAAoB4B,WAApB,EAAgD;CAAA,QAAfC,MAAe,uEAAN,IAAM;;CAAA;;CAC/C,SAAK7B,MAAL,GAAcA,MAAd;CACA,SAAK4B,WAAL,GAAmBA,WAAW,IAAI,EAAlC;CACA,SAAKN,QAAL,GAAgB,EAAhB;CACA,SAAKQ,IAAL,GAAY,CAAZ;CACA,SAAKC,MAAL,GAAc,CAAd;CACA,SAAKF,MAAL,GAAcA,MAAd;CACA;;;;YACD,kBAAS;CACR,aAAO,CAAC,KAAKA,MAAb;CACA;;;YACD,+BAAsB;CACrB,aAAO,KAAKD,WAAL,CAAiB7I,MAAjB,GAA0B,CAAjC;CACA;;;YACD,sCAA6B;CAC5B,UAAI6C,KAAK,GAAGpE,IAAI,CAACkI,KAAL,CAAWlI,IAAI,CAACC,MAAL,KAAgB,KAAKmK,WAAL,CAAiB7I,MAA5C,CAAZ;CACA,UAAIiH,MAAM,GAAG,KAAK4B,WAAL,CAAiBI,MAAjB,CAAwBpG,KAAxB,EAA+B,CAA/B,EAAkC,CAAlC,CAAb;CACA,aAAOoE,MAAP;CACA;;;YACD,oBAAW;CACV,aAAO,KAAK+B,MAAL,GAAc,CAAd,GAAkB,KAAKD,IAAL,GAAY,KAAKC,MAAnC,GAA4C,CAAnD;CACA;;;YACD,wBAAe;CACd,UAAInB,IAAI,GAAG,KAAKU,QAAL,CAAc,CAAd,CAAX;;CACA,WAAK,IAAIxI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKwI,QAAL,CAAcvI,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;CAC9C,YAAImJ,KAAK,GAAG,KAAKX,QAAL,CAAcxI,CAAd,CAAZ;;CACA,YAAImJ,KAAK,CAACC,QAAN,KAAmBtB,IAAI,CAACsB,QAAL,EAAvB,EAAwC;CACvCtB,UAAAA,IAAI,GAAGqB,KAAP;CACA;CACD;;CACD,aAAOrB,IAAP;CACA;;;YACD,yBAAgB;CACf,aAAO,KAAKuB,YAAL,GAAoBnC,MAA3B;CACA;;;YACD,kBAASA,MAAT,EAAiB4B,WAAjB,EAA8B;CAC7B,UAAIK,KAAK,GAAG,IAAIjB,QAAJ,CAAahB,MAAb,EAAqB4B,WAArB,EAAkC,IAAlC,CAAZ;CACA,WAAKN,QAAL,CAAcjI,IAAd,CAAmB4I,KAAnB;CACA,aAAOA,KAAP;CACA;;;YACD,uBAAc;CACb,aAAO,KAAKX,QAAL,CAAc9J,IAAI,CAACkI,KAAL,CAAWlI,IAAI,CAACC,MAAL,KAAgB,KAAK6J,QAAL,CAAcvI,MAAzC,CAAd,CAAP;CACA;;;YACD,2BAA0B;CAAA,UAAV+I,IAAU,uEAAH,CAAG;CACzB,WAAKC,MAAL,IAAe,CAAf;CACA,WAAKD,IAAL,IAAaA,IAAb;;CACA,UAAI,CAAC,KAAKM,MAAL,EAAL,EAAoB;CACnB,aAAKP,MAAL,CAAY5B,eAAZ,CAA4B6B,IAA5B;CACA;CACD;;;;;;KChGmBO;CACnB,eAAYpD,KAAZ,EAAmB;CAAA;;CACjB,SAAKC,aAAL,GAAqBD,KAArB;CACA,SAAKA,KAAL,GAAa,IAAb;CACD;;;;YACD,aAAIG,UAAJ,EAAgB;CACd,UAAIK,KAAK,GAAGH,MAAM,CAACF,UAAD,CAAlB;CACA,UAAI2B,IAAI,GAAG,IAAIuB,SAAJ,CAAY,IAAZ,EAAkB,KAAKpD,aAAL,CAAmBM,UAAnB,EAAlB,EAAmD,IAAnD,CAAX;;CACA,aAAOC,KAAK,EAAZ,EAAgB;CACd,aAAKR,KAAL,GAAa,KAAKC,aAAL,CAAmBY,KAAnB,EAAb;CACA,YAAItF,IAAI,GAAGuG,IAAX;CACAvG,QAAAA,IAAI,GAAG,KAAKyG,SAAL,CAAezG,IAAf,CAAP;CACAA,QAAAA,IAAI,GAAG,KAAK0G,UAAL,CAAgB1G,IAAhB,CAAP;CACA,aAAK2G,UAAL;CACA,aAAKC,eAAL,CAAqB5G,IAArB;CACD;;CACD,aAAOuG,IAAI,CAACnB,aAAL,EAAP;CACD;;;YACD,mBAAUpF,IAAV,EAAgB;CACd,aAAO,CAACA,IAAI,CAAC6G,mBAAL,EAAD,IAA+B7G,IAAI,CAAC8G,QAAL,CAAcvI,MAAd,GAAuB,CAA7D,EAAgE;CAC9DyB,QAAAA,IAAI,GAAGA,IAAI,CAAC+G,WAAL,EAAP;CACA,aAAKtC,KAAL,CAAWc,QAAX,CAAoBvF,IAAI,CAACwF,MAAzB;CACD;;CACD,aAAOxF,IAAP;CACD;;;YACD,oBAAWA,IAAX,EAAiB;CACf,UAAIA,IAAI,CAAC6G,mBAAL,EAAJ,EAAgC;CAC9B,YAAIG,eAAe,GAAGhH,IAAI,CAACiH,0BAAL,EAAtB;CACA,aAAKxC,KAAL,CAAWc,QAAX,CAAoByB,eAApB;CACAhH,QAAAA,IAAI,GAAGA,IAAI,CAACkH,QAAL,CAAcF,eAAd,EAA+B,KAAKvC,KAAL,CAAWO,UAAX,EAA/B,CAAP;CACD;;CACD,aAAOhF,IAAP;CACD;;;YACD,sBAAa;CACX,UAAI+E,OAAO,GAAG,KAAKN,KAAL,CAAWO,UAAX,EAAd;;CACA,aAAOD,OAAO,CAACxG,MAAR,GAAiB,CAAxB,EAA2B;CACzB,YAAI4I,YAAY,GAAGpC,OAAO,CAAC/H,IAAI,CAACkI,KAAL,CAAWlI,IAAI,CAACC,MAAL,KAAgB8H,OAAO,CAACxG,MAAnC,CAAD,CAA1B;CACA,aAAKkG,KAAL,CAAWc,QAAX,CAAoB4B,YAApB;CACApC,QAAAA,OAAO,GAAG,KAAKN,KAAL,CAAWO,UAAX,EAAV;CACD;CACF;;;YACD,yBAAgBhF,IAAhB,EAAsB;CACpBA,MAAAA,IAAI,CAACyF,eAAL,CAAqB,KAAKhB,KAAL,CAAWiB,SAAX,EAArB;CACD;;;;;;KAGGoC;CACJ,mBAAYtC,MAAZ,EAAoB4B,WAApB,EAAgD;CAAA,QAAfC,MAAe,uEAAN,IAAM;;CAAA;;CAC9C,SAAK7B,MAAL,GAAcA,MAAd;CACA,SAAK4B,WAAL,GAAmBA,WAAW,IAAI,EAAlC;CACA,SAAKN,QAAL,GAAgB,EAAhB;CACA,SAAKQ,IAAL,GAAY,CAAZ;CACA,SAAKC,MAAL,GAAc,CAAd;CACA,SAAKF,MAAL,GAAcA,MAAd;CACD;;;;YACD,kBAAS;CACP,aAAO,CAAC,KAAKA,MAAb;CACD;;;YACD,+BAAsB;CACpB,aAAO,KAAKD,WAAL,CAAiB7I,MAAjB,GAA0B,CAAjC;CACD;;;YACD,sCAA6B;CAC3B,UAAI6C,KAAK,GAAGpE,IAAI,CAACkI,KAAL,CAAWlI,IAAI,CAACC,MAAL,KAAgB,KAAKmK,WAAL,CAAiB7I,MAA5C,CAAZ;CACA,UAAIiH,MAAM,GAAG,KAAK4B,WAAL,CAAiBI,MAAjB,CAAwBpG,KAAxB,EAA+B,CAA/B,EAAkC,CAAlC,CAAb;CACA,aAAOoE,MAAP;CACD;;;YACD,oBAAW;CACT,aAAO,KAAK+B,MAAL,GAAc,CAAd,GAAkB,KAAKD,IAAL,GAAY,KAAKC,MAAnC,GAA4C,CAAnD;CACD;;;YACD,wBAAe;CACb,UAAInB,IAAI,GAAG,KAAKU,QAAL,CAAc,CAAd,CAAX;;CACA,WAAK,IAAIxI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKwI,QAAL,CAAcvI,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;CAC7C,YAAImJ,KAAK,GAAG,KAAKX,QAAL,CAAcxI,CAAd,CAAZ;;CACA,YAAImJ,KAAK,CAACF,MAAN,GAAenB,IAAI,CAACmB,MAAxB,EAAgC;CAC9BnB,UAAAA,IAAI,GAAGqB,KAAP;CACD,SAFD,MAEO,IAAIA,KAAK,CAACF,MAAN,KAAiBnB,IAAI,CAACmB,MAA1B,EAAkC;CACvCnB,UAAAA,IAAI,GAAGqB,KAAK,CAACH,IAAN,GAAalB,IAAI,CAACkB,IAAlB,GAAyBG,KAAzB,GAAiCrB,IAAxC;CACD;CACF;;CACD,aAAOA,IAAP;CACD;;;YACD,yBAAgB;CACd,aAAO,KAAKuB,YAAL,GAAoBnC,MAA3B;CACD;;;YACD,uBAAc;CACZ,UAAIuC,aAAa,GAAG,KAAKL,QAAL,EAApB;CACA,UAAIM,SAAS,GAAG,KAAKX,MAAL,CAAYK,QAAZ,EAAhB;CACA,UAAIO,IAAI,GACND,SAAS,GAAGhL,IAAI,CAACkL,IAAL,CAAU,IAAIlL,IAAI,CAACmL,GAAL,CAAS,KAAKd,MAAL,CAAYE,MAArB,CAAJ,GAAmC,KAAKA,MAAlD,CADd;CAEA,aAAOQ,aAAa,GAAGE,IAAvB;CACD;;;YACD,kBAASzC,MAAT,EAAiB4B,WAAjB,EAA8B;CAC5B,UAAIK,KAAK,GAAG,IAAIK,OAAJ,CAAYtC,MAAZ,EAAoB4B,WAApB,EAAiC,IAAjC,CAAZ;CACA,WAAKN,QAAL,CAAcjI,IAAd,CAAmB4I,KAAnB;CACA,aAAOA,KAAP;CACD;;;YACD,uBAAc;CACZ,UAAIW,QAAQ,GAAG,KAAKtB,QAAL,CAAc,CAAd,CAAf;;CACA,WAAK,IAAIxI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKwI,QAAL,CAAcvI,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;CAC7C,YAAImJ,KAAK,GAAG,KAAKX,QAAL,CAAcxI,CAAd,CAAZ;;CACA,YAAImJ,KAAK,CAACY,WAAN,KAAsBD,QAAQ,CAACC,WAAT,EAA1B,EAAkD;CAChDD,UAAAA,QAAQ,GAAGX,KAAX;CACD;CACF;;CACD,aAAOW,QAAP;CACD;;;YACD,2BAA0B;CAAA,UAAVd,IAAU,uEAAH,CAAG;CACxB,WAAKC,MAAL,IAAe,CAAf;CACA,WAAKD,IAAL,IAAaA,IAAb;;CACA,UAAI,CAAC,KAAKM,MAAL,EAAL,EAAoB;CAClB,aAAKP,MAAL,CAAY5B,eAAZ,CAA4B6B,IAA5B;CACD;CACF;;;;;;KC9GkBgB;CACnB,uBAA0D;CAAA,QAA5ClK,OAA4C,QAA5CA,OAA4C;CAAA,gCAAnCmK,WAAmC;CAAA,QAAnCA,WAAmC,iCAArB,CAAqB;CAAA,QAAlBvJ,cAAkB,QAAlBA,cAAkB;;CAAA;;CACxD,SAAKyF,KAAL,GAAa,IAAI+D,KAAJ,CAAU;CACrBpK,MAAAA,OAAO,EAAPA,OADqB;CAErBmK,MAAAA,WAAW,EAAXA;CAFqB,KAAV,CAAb;CAIA,SAAKvJ,cAAL,GAAsBA,cAAtB;CACA,SAAKyJ,GAAL,GAAW,IAAIZ,GAAJ,CAAQ,KAAKpD,KAAb,CAAX;CACA,SAAKiE,UAAL,GAAkB,IAAlB;CACD;;;;YACD,wBAA6B;CAAA;;CAAA,UAAhB9D,UAAgB,uEAAH,CAAG;;CAC3B,UAAI+D,QAAQ,GAAG,SAAXA,QAAW;CAAA,YAAGlE,KAAH,SAAGA,KAAH;CAAA,eAAe,UAAA1F,MAAM;CAAA,iBAClC6J,cAAc,CAACnE,KAAK,CAACrG,OAAP,EAAgBW,MAAhB,EAAwB,KAAI,CAACC,cAA7B,CADoB;CAAA,SAArB;CAAA,OAAf;;CAEA,WAAK0J,UAAL,GAAkB,KAAKD,GAAL,CAASI,GAAT,CAAajE,UAAb,CAAlB;CACA,aAAO,KAAK8D,UAAL,CAAgBzC,GAAhB,CAAoB0C,QAApB,CAAP;CACD;;;YACD,wBAAeG,UAAf,EAA2B;CAAA;;CACzBA,MAAAA,UAAU,CAACtF,OAAX,CAAmB,UAACuF,MAAD,EAAS3H,KAAT,EAAmB;CACpC,oCAAsB,MAAI,CAACsH,UAAL,CAAgBtH,KAAhB,CAAtB;CAAA,YAAMpB,IAAN,yBAAMA,IAAN;CAAA,YAAY2F,KAAZ,yBAAYA,KAAZ;CACA3F,QAAAA,IAAI,CAACgJ,YAAL,CAAkBD,MAAM,GAAGpD,KAA3B;CACD,OAHD;CAID;;;;;;KAGGkC;CACJ,eAAYpD,KAAZ,EAAmB;CAAA;;CACjB,SAAKC,aAAL,GAAqBD,KAArB;CACA,SAAKA,KAAL,GAAa,IAAb;CACA,SAAK8B,IAAL,GAAY,IAAIuB,OAAJ,CAAY,IAAZ,EAAkB,KAAKpD,aAAL,CAAmBM,UAAnB,EAAlB,EAAmD,IAAnD,CAAZ;CACD;;;;YACD,aAAIJ,UAAJ,EAAgB;CAAA;;CACd,UAAI8D,UAAU,GAAG/I,KAAK,CAACsJ,IAAN,CAAW;CAAE1K,QAAAA,MAAM,EAAEuG,MAAM,CAACF,UAAD;CAAhB,OAAX,EAA2CqB,GAA3C,CAA+C;CAAA,eAC9D,MAAI,CAACiD,OAAL,EAD8D;CAAA,OAA/C,CAAjB;CAGA,aAAOR,UAAP;CACD;;;YACD,mBAAU;CACR,UAAI1I,IAAI,GAAG,KAAKuG,IAAhB;CACA,WAAK9B,KAAL,GAAa,KAAKC,aAAL,CAAmBY,KAAnB,EAAb;CACAtF,MAAAA,IAAI,GAAG,KAAKyG,SAAL,CAAezG,IAAf,CAAP;CACAA,MAAAA,IAAI,GAAG,KAAK0G,UAAL,CAAgB1G,IAAhB,CAAP;CACA,WAAK2G,UAAL;CACA,UAAIhB,KAAK,GAAG,CAAC3F,IAAI,CAAC4H,MAAL,EAAD,GAAiB5H,IAAI,CAACqH,MAAL,CAAYK,QAAZ,EAAjB,GAA0C,CAAtD;CACA,WAAKd,eAAL,CAAqB5G,IAArB,EAA2B2F,KAA3B;CACA,aAAO;CACLA,QAAAA,KAAK,EAAEA,KADF;CAEL3F,QAAAA,IAAI,EAAEA,IAFD;CAGLyE,QAAAA,KAAK,EAAE,KAAKA;CAHP,OAAP;CAKD;;;YACD,mBAAUzE,IAAV,EAAgB;CACd,aAAO,CAACA,IAAI,CAAC6G,mBAAL,EAAD,IAA+B7G,IAAI,CAAC8G,QAAL,CAAcvI,MAAd,GAAuB,CAA7D,EAAgE;CAC9DyB,QAAAA,IAAI,GAAGA,IAAI,CAAC+G,WAAL,EAAP;CACA,aAAKtC,KAAL,CAAWc,QAAX,CAAoBvF,IAAI,CAACwF,MAAzB;CACD;;CACD,aAAOxF,IAAP;CACD;;;YACD,oBAAWA,IAAX,EAAiB;CACf,UAAIA,IAAI,CAAC6G,mBAAL,EAAJ,EAAgC;CAC9B,YAAIG,eAAe,GAAGhH,IAAI,CAACiH,0BAAL,EAAtB;CACA,aAAKxC,KAAL,CAAWc,QAAX,CAAoByB,eAApB;CACAhH,QAAAA,IAAI,GAAGA,IAAI,CAACkH,QAAL,CAAcF,eAAd,EAA+B,KAAKvC,KAAL,CAAWO,UAAX,EAA/B,CAAP;CACD;;CACD,aAAOhF,IAAP;CACD;;;YACD,sBAAa;CACX,UAAI+E,OAAO,GAAG,KAAKN,KAAL,CAAWO,UAAX,EAAd;;CACA,aAAOD,OAAO,CAACxG,MAAR,GAAiB,CAAxB,EAA2B;CACzB,YAAI4I,YAAY,GAAGpC,OAAO,CAAC/H,IAAI,CAACkI,KAAL,CAAWlI,IAAI,CAACC,MAAL,KAAgB8H,OAAO,CAACxG,MAAnC,CAAD,CAA1B;CACA,aAAKkG,KAAL,CAAWc,QAAX,CAAoB4B,YAApB;CACApC,QAAAA,OAAO,GAAG,KAAKN,KAAL,CAAWO,UAAX,EAAV;CACD;CACF;;;YACD,yBAAgBhF,IAAhB,EAAsB2F,KAAtB,EAA6B;CAC3B3F,MAAAA,IAAI,CAACyF,eAAL,CAAqBE,KAArB;CACD;;;;;;KAGGmC;CACJ,mBAAYtC,MAAZ,EAAoB4B,WAApB,EAAgD;CAAA,QAAfC,MAAe,uEAAN,IAAM;;CAAA;;CAC9C,SAAK7B,MAAL,GAAcA,MAAd;CACA,SAAK4B,WAAL,GAAmBA,WAAW,IAAI,EAAlC;CACA,SAAKN,QAAL,GAAgB,EAAhB;CACA,SAAKQ,IAAL,GAAY,CAAZ;CACA,SAAKC,MAAL,GAAc,CAAd;CACA,SAAKF,MAAL,GAAcA,MAAd;CACD;;;;YACD,kBAAS;CACP,aAAO,CAAC,KAAKA,MAAb;CACD;;;YACD,+BAAsB;CACpB,aAAO,KAAKD,WAAL,CAAiB7I,MAAjB,GAA0B,CAAjC;CACD;;;YACD,sCAA6B;CAC3B,UAAI6C,KAAK,GAAGpE,IAAI,CAACkI,KAAL,CAAWlI,IAAI,CAACC,MAAL,KAAgB,KAAKmK,WAAL,CAAiB7I,MAA5C,CAAZ;CACA,UAAIiH,MAAM,GAAG,KAAK4B,WAAL,CAAiBI,MAAjB,CAAwBpG,KAAxB,EAA+B,CAA/B,EAAkC,CAAlC,CAAb;CACA,aAAOoE,MAAP;CACD;;;YACD,oBAAW;CACT,aAAO,KAAK+B,MAAL,GAAc,CAAd,GAAkB,KAAKD,IAAL,GAAY,KAAKC,MAAnC,GAA4C,CAAnD;CACD;;;YACD,wBAAe;CACb,UAAInB,IAAI,GAAG,KAAKU,QAAL,CAAc,CAAd,CAAX;;CACA,WAAK,IAAIxI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKwI,QAAL,CAAcvI,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;CAC7C,YAAImJ,KAAK,GAAG,KAAKX,QAAL,CAAcxI,CAAd,CAAZ;;CACA,YAAImJ,KAAK,CAACF,MAAN,GAAenB,IAAI,CAACmB,MAAxB,EAAgC;CAC9BnB,UAAAA,IAAI,GAAGqB,KAAP;CACD,SAFD,MAEO,IAAIA,KAAK,CAACF,MAAN,KAAiBnB,IAAI,CAACmB,MAA1B,EAAkC;CACvCnB,UAAAA,IAAI,GAAGqB,KAAK,CAACH,IAAN,GAAalB,IAAI,CAACkB,IAAlB,GAAyBG,KAAzB,GAAiCrB,IAAxC;CACD;CACF;;CACD,aAAOA,IAAP;CACD;;;YACD,yBAAgB;CACd,aAAO,KAAKuB,YAAL,GAAoBnC,MAA3B;CACD;;;YACD,uBAAc;CACZ,UAAIuC,aAAa,GAAG,KAAKL,QAAL,EAApB;CACA,UAAIM,SAAS,GAAG,KAAKX,MAAL,CAAYK,QAAZ,KAAyB,CAAzC;CACA,UAAIO,IAAI,GACND,SAAS,GAAGhL,IAAI,CAACkL,IAAL,CAAU,IAAIlL,IAAI,CAACmL,GAAL,CAAS,KAAKd,MAAL,CAAYE,MAArB,CAAJ,GAAmC,KAAKA,MAAlD,CADd;CAEA,aAAOQ,aAAa,GAAGE,IAAvB;CACD;;;YACD,kBAASzC,MAAT,EAAiB4B,WAAjB,EAA8B;CAC5B,UAAIK,KAAK,GAAG,IAAIK,OAAJ,CAAYtC,MAAZ,EAAoB4B,WAApB,EAAiC,IAAjC,CAAZ;CACA,WAAKN,QAAL,CAAcjI,IAAd,CAAmB4I,KAAnB;CACA,aAAOA,KAAP;CACD;;;YACD,uBAAc;CACZ,UAAIW,QAAQ,GAAG,KAAKtB,QAAL,CAAc,CAAd,CAAf;;CACA,WAAK,IAAIxI,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKwI,QAAL,CAAcvI,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;CAC7C,YAAImJ,KAAK,GAAG,KAAKX,QAAL,CAAcxI,CAAd,CAAZ;CACA,YAAI6K,aAAa,GAAG1B,KAAK,CAACY,WAAN,EAApB;CACA,YAAIe,gBAAgB,GAAGhB,QAAQ,CAACC,WAAT,EAAvB;;CACA,YAAIc,aAAa,GAAGC,gBAApB,EAAsC;CACpChB,UAAAA,QAAQ,GAAGX,KAAX;CACD,SAFD,MAEO,IAAI0B,aAAa,KAAKC,gBAAlB,IAAsCpM,IAAI,CAACC,MAAL,KAAgB,GAA1D,EAA+D;CACpEmL,UAAAA,QAAQ,GAAGX,KAAX;CACD;CACF;;CACD,aAAOW,QAAP;CACD;;;YACD,2BAA0B;CAAA,UAAVd,IAAU,uEAAH,CAAG;CACxB,WAAKC,MAAL,IAAe,CAAf;CACA,WAAKD,IAAL,IAAaA,IAAb;;CACA,UAAI,CAAC,KAAKM,MAAL,EAAL,EAAoB;CAClB,aAAKP,MAAL,CAAY5B,eAAZ,CAA4B6B,IAA5B;CACD;CACF;;;YACD,sBAAaA,IAAb,EAAmB;CACjB,WAAKA,IAAL,IAAaA,IAAb;;CACA,UAAI,CAAC,KAAKM,MAAL,EAAL,EAAoB;CAClB,aAAKP,MAAL,CAAY5B,eAAZ,CAA4B6B,IAA5B;CACD;CACF;;;;;;KAGGkB;CACJ,wBAA2E;CAAA,QAA7DpK,OAA6D,SAA7DA,OAA6D;CAAA,kCAApDmK,WAAoD;CAAA,QAApDA,WAAoD,kCAAtC,CAAsC;CAAA,kCAAnCc,WAAmC;CAAA,QAAnCA,WAAmC,kCAArB,CAAqB;CAAA,iCAAlBC,UAAkB;CAAA,QAAlBA,UAAkB,iCAAL,CAAK;;CAAA;;CACzE,SAAKlL,OAAL,GAAemL,aAAa,CAACnL,OAAD,CAA5B;CACA,SAAKoL,UAAL,GAAkBC,aAAa,CAAC,KAAKrL,OAAN,CAA/B;CACA,SAAKmK,WAAL,GAAmBA,WAAnB;CACA,SAAKc,WAAL,GAAmBA,WAAnB;CACA,SAAKC,UAAL,GAAkBA,UAAlB;CACD;;;;YACD,iBAAQ;CACN,UAAI7E,KAAK,GAAG3D,MAAM,CAACC,MAAP,CAAcD,MAAM,CAAC5C,MAAP,CAAcsK,KAAK,CAACkB,SAApB,CAAd,EAA8C,IAA9C,CAAZ;CACAjF,MAAAA,KAAK,CAACrG,OAAN,GAAgBuL,YAAY,CAAC,KAAKvL,OAAN,CAA5B;CACAqG,MAAAA,KAAK,CAAC+E,UAAN,GAAmBC,aAAa,CAAChF,KAAK,CAACrG,OAAP,CAAhC;CACA,aAAOqG,KAAP;CACD;;;YACD,sBAAa;CACX,UAAI,KAAK6E,UAAL,GAAkB,KAAKf,WAA3B,EAAwC;CACtC,eAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,CAAP;CACD,OAFD,MAEO;CACL,eAAO,EAAP;CACD;CACF;;;YACD,kBAASqB,KAAT,EAAgB;CACd,WAAKJ,UAAL,CAAgB,KAAKH,WAArB,EAAkC,KAAKC,UAAvC,IAAqDM,KAArD;CACA,WAAKP,WAAL,IAAoB,CAApB;;CACA,UAAI,KAAKA,WAAL,KAAqB,KAAKG,UAAL,CAAgBjL,MAAzC,EAAiD;CAC/C,aAAK8K,WAAL,GAAmB,CAAnB;CACA,aAAKC,UAAL,IAAmB,CAAnB;CACD;CACF;;;;;;CAGH,SAASC,aAAT,CAAuBpL,OAAvB,EAAgC;CAC9B,MAAIC,OAAO,GAAG,EAAd;CACA,MAAIC,cAAc,GAAGF,OAAO,CAAC,CAAD,CAA5B;;CACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACI,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;CACvC,QAAIE,YAAY,GAAG,EAAnB;;CACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,OAAO,CAACG,CAAD,CAA3B,EAAgCG,CAAC,EAAjC,EAAqC;CACnC,UAAIC,WAAW,GAAG,EAAlB;;CACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,cAApB,EAAoCM,CAAC,EAArC,EAAyC;CACvCD,QAAAA,WAAW,CAACG,IAAZ,CAAiB,EAAjB;CACD;;CACDL,MAAAA,YAAY,CAACK,IAAb,CAAkBH,WAAlB;CACD;;CACDL,IAAAA,cAAc,GAAGG,YAAY,CAACD,MAA9B;CACAH,IAAAA,OAAO,CAACS,IAAR,CAAaL,YAAb;CACD;;CACD,SAAOJ,OAAP;CACD;;CAED,SAASwK,cAAT,CAAwBxK,OAAxB,EAAiCW,MAAjC,EAAqE;CAAA,MAA5BC,cAA4B,uEAAX,SAAW;CACnE,MAAIC,aAAa,GAAGF,MAApB;CACA,MAAIG,aAAa,GAAG,CAACH,MAAM,CAACI,MAAP,EAAD,CAApB;;CACA,OAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;CACvC,QAAIE,YAAY,GAAGJ,OAAO,CAACE,CAAD,CAA1B;CACA,QAAIc,kBAAkB,GAAG,EAAzB;;CACA,SAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAAY,CAACD,MAAjC,EAAyCE,CAAC,EAA1C,EAA8C;CAC5C,UAAIC,WAAW,GAAGF,YAAY,CAACC,CAAD,CAA9B;CACA,UAAIY,GAAG,GAAG,CAAV;;CACA,WAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACH,MAAhC,EAAwCI,CAAC,EAAzC,EAA6C;CAC3C,YAAIW,aAAa,GAAGwF,MAAM,aAAMpG,WAAW,CAACC,CAAD,CAAX,CAAekL,KAAf,CAAqB,CAArB,EAAwBC,IAAxB,CAA6B,EAA7B,CAAN,EAA1B;CACAzK,QAAAA,GAAG,IAAIJ,aAAa,CAACN,CAAD,CAAb,GAAmBW,aAA1B;CACD;;CACD,UAAIC,iBAAiB,GAAGC,aAAa,CAACR,cAAD,EAAiBV,CAAjB,CAAb,CAAiCN,MAAjC,CAAwCqB,GAAxC,CAAxB;CACAD,MAAAA,kBAAkB,CAACP,IAAnB,CAAwBU,iBAAxB;CACD;;CACDL,IAAAA,aAAa,CAACL,IAAd,CAAmBO,kBAAnB;CACAH,IAAAA,aAAa,GAAGG,kBAAhB;CACD;;CACD,SAAOF,aAAP;CACD;;CAED,SAASM,aAAT,CAAuBC,IAAvB,EAA6BC,UAA7B,EAAyC;CACvC,MAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;CAC5B,WAAO1B,UAAU,CAAC0B,IAAD,CAAjB;CACD,GAFD,MAEO,IAAIE,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;CAC9B,WAAO1B,UAAU,CAAC0B,IAAI,CAACC,UAAD,CAAL,CAAjB;CACD;CACF;;CAED,SAASG,IAAT,CAAczB,OAAd,EAAuB0B,QAAvB,EAAiC;CAC/B,OAAK,IAAIxB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;CACvC,QAAIE,YAAY,GAAGJ,OAAO,CAACE,CAAD,CAA1B;;CACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,YAAY,CAACD,MAAjC,EAAyCE,CAAC,EAA1C,EAA8C;CAC5C,UAAIC,WAAW,GAAGF,YAAY,CAACC,CAAD,CAA9B;;CACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACH,MAAhC,EAAwCI,CAAC,EAAzC,EAA6C;CAC3C,YAAIW,aAAa,GAAGZ,WAAW,CAACC,CAAD,CAA/B;CACAmB,QAAAA,QAAQ,CAAC;CACPC,UAAAA,MAAM,EAAET,aADD;CAEPU,UAAAA,IAAI,EAAEtB,WAFC;CAGPuB,UAAAA,KAAK,EAAEzB,YAHA;CAIPJ,UAAAA,OAAO,EAAEA,OAJF;CAKP8B,UAAAA,IAAI,EAAE,CAAC5B,CAAD,EAAIG,CAAJ,EAAOE,CAAP;CALC,SAAD,CAAR;CAOD;CACF;CACF;CACF;;CAED,SAAS8K,aAAT,CAAuBrL,OAAvB,EAAgC;CAC9B,MAAIoL,UAAU,GAAG,EAAjB;CACA3J,EAAAA,IAAI,CAACzB,OAAD,EAAU,UAAAiE,IAAI;CAAA,WAAImH,UAAU,CAAC3K,IAAX,CAAgBwD,IAAI,CAACtC,MAArB,CAAJ;CAAA,GAAd,CAAJ;CACA,SAAOyJ,UAAP;CACD;;CAED,SAASG,YAAT,CAAsBvL,OAAtB,EAA+B;CAC7B,SAAOgC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAelC,OAAf,CAAX,CAAP;CACD;;ACjQD,aAAe;CACbA,EAAAA,OAAO,EAAEA,OADI;CAEbwC,EAAAA,qBAAqB,EAAEA,qBAFV;CAGbuC,EAAAA,eAAe,EAAEA,eAHJ;CAIbqB,EAAAA,GAAG,EAAEA,GAJQ;CAKb8B,EAAAA,IAAI,EAAEA,IALO;CAMbuB,EAAAA,GAAG,EAAEA,KANQ;CAObS,EAAAA,KAAK,EAAEA;CAPM,CAAf;;;;;;;;"}